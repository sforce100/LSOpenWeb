diff --git a/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/index.js b/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/index.js
index bbd8ab6..0d22c0b 100644
--- a/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/index.js
+++ b/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/index.js
@@ -21,7 +21,7 @@ function DocusaurusSearchLocalPlugin(context, options) {
         getThemePath() {
             return themePath;
         },
-        postBuild: postBuildFactory_1.postBuildFactory(config),
+        postBuild: postBuildFactory_1.postBuildFactory(config, context.siteConfig),
         getPathsToWatch() {
             return [pagePath];
         },
diff --git a/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/postBuildFactory.js b/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/postBuildFactory.js
index 0633b55..0b878fc 100644
--- a/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/postBuildFactory.js
+++ b/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/postBuildFactory.js
@@ -10,11 +10,11 @@ const debug_1 = require("./debug");
 const processDocInfos_1 = require("./processDocInfos");
 const scanDocuments_1 = require("./scanDocuments");
 const writeFileAsync = util_1.default.promisify(fs_1.default.writeFile);
-function postBuildFactory(config) {
+function postBuildFactory(config, siteConfig) {
     return function postBuild(buildData) {
         return tslib_1.__awaiter(this, void 0, void 0, function* () {
             debug_1.debugInfo("gathering documents");
-            const data = processDocInfos_1.processDocInfos(buildData, config);
+            const data = processDocInfos_1.processDocInfos(buildData, config, siteConfig);
             debug_1.debugInfo("parsing documents");
             // Give every index entry a unique id so that the index does not need to store long URLs.
             const allDocuments = yield scanDocuments_1.scanDocuments(data);
diff --git a/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/processDocInfos.js b/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/processDocInfos.js
index 634f844..73918fe 100644
--- a/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/processDocInfos.js
+++ b/node_modules/@easyops-cn/docusaurus-search-local/dist/server/server/utils/processDocInfos.js
@@ -3,14 +3,28 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.processDocInfos = void 0;
 const tslib_1 = require("tslib");
 const path_1 = tslib_1.__importDefault(require("path"));
-function processDocInfos({ routesPaths, outDir, baseUrl }, { indexDocs, indexBlog, indexPages, docsRouteBasePath, blogRouteBasePath, ignoreFiles, }) {
+function processDocInfos({ routesPaths, outDir, baseUrl }, { indexDocs, indexBlog, indexPages, docsRouteBasePath, blogRouteBasePath, ignoreFiles, }, siteConfig) {
     return routesPaths
         .map((url) => {
         // istanbul ignore next
         if (!url.startsWith(baseUrl)) {
             throw new Error(`The route must start with the baseUrl "${baseUrl}", but was "${url}". This is a bug, please report it.`);
         }
-        const route = url.substr(baseUrl.length);
+        // const route = url.substr(baseUrl.length);
+        const route = url.substr(baseUrl.length).replace(/\/$/, "");
+
+        // Do not index homepage, error page and search page.
+        if (
+            route === "" ||
+            route === "404.html" ||
+            route ===
+            (siteConfig.trailingSlash === false
+                ? "search.html"
+                : "search/index.html")
+        ) {
+            return;
+        }
+
         // ignore files
         if (ignoreFiles === null || ignoreFiles === void 0 ? void 0 : ignoreFiles.some((reg) => {
             if (typeof reg === "string") {
@@ -20,20 +34,20 @@ function processDocInfos({ routesPaths, outDir, baseUrl }, { indexDocs, indexBlo
         })) {
             return;
         }
-        if (route === "404.html" || route === "search/index.html") {
-            // Do not index error page and search page.
-            return;
-        }
+        // if (route === "404.html" || route === "search/index.html") {
+        //     // Do not index error page and search page.
+        //     return;
+        // }
         if (indexBlog &&
-            blogRouteBasePath.some((basePath) => urlMatchesPrefix(route, basePath))) {
-            if (blogRouteBasePath.some((basePath) => route === basePath || urlMatchesPrefix(route, `${basePath}/tags`))) {
+            blogRouteBasePath.some((basePath) => isSameOrSubRoute(route, basePath))) {
+            if (blogRouteBasePath.some((basePath) => isSameRoute(route, basePath) || isSameOrSubRoute(route, `${basePath}/tags`))) {
                 // Do not index list of blog posts and tags filter pages
                 return;
             }
             return { route, url, type: "blog" };
         }
         if (indexDocs &&
-            docsRouteBasePath.some((basePath) => urlMatchesPrefix(route, basePath))) {
+            docsRouteBasePath.some((basePath) => isSameOrSubRoute(route, basePath))) {
             return { route, url, type: "docs" };
         }
         if (indexPages) {
@@ -43,13 +57,31 @@ function processDocInfos({ routesPaths, outDir, baseUrl }, { indexDocs, indexBlo
     })
         .filter(Boolean)
         .map(({ route, url, type }) => ({
-        filePath: path_1.default.join(outDir, route, "index.html"),
+        // filePath: path_1.default.join(outDir, route, "index.html"),
+        filePath: path_1.default.join(
+            outDir,
+            siteConfig.trailingSlash === false
+              ? `${route}.html`
+              : `${route}/index.html`
+          ),
         url,
         type,
     }));
 }
 exports.processDocInfos = processDocInfos;
-function urlMatchesPrefix(url, prefix) {
-    const rightTrimmedPrefix = prefix.replace(/\/$/, "");
-    return url === rightTrimmedPrefix || url.startsWith(`${rightTrimmedPrefix}/`);
+// function urlMatchesPrefix(url, prefix) {
+//     const rightTrimmedPrefix = prefix.replace(/\/$/, "");
+//     return url === rightTrimmedPrefix || url.startsWith(`${rightTrimmedPrefix}/`);
+// }
+
+function isSameRoute(routeA, routeB) {
+    return addTrailingSlash(routeA) === addTrailingSlash(routeB);
+}
+  
+function isSameOrSubRoute(childRoute, parentRoute) {
+    return addTrailingSlash(childRoute).startsWith(addTrailingSlash(parentRoute));
+}
+
+function addTrailingSlash(route) {
+    return `${route}/`;
 }
\ No newline at end of file

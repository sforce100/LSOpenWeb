// const { pathExists } = require('fs-extra');
const { exec } = require('shelljs')
const { join } = require('path');

const shellRes = exec(`git submodule foreach`, {
    cwd: __dirname,
}).stdout.trim();

const submodulesPath = shellRes.split('\n').map(item => {
    const reg = /\'(.*?)\'/;
    return reg.exec(item)[1];
})

const sidebars = {};
const subConfigs = [];
const isProd = process.env.DEPLOY_ENV === 'prod'

function handleSideBar(sidebar, path) {
    for (let key in sidebar) {
        let item = sidebar[key];
        if (typeof item === 'string') {
            item = `${path}/${item}`;
        } else {
            if (Array.isArray(item.items)) {
                item.items = handleSideBar(item.items, path);
            }
        }
        sidebar[key] = item
    }
    return sidebar
}

for (let index in submodulesPath) {
    const path = submodulesPath[index];
    try {
        const sidebar = require(join(__dirname, path, '.lsopen', 'sidebar.json'));
        if (!Array.isArray(sidebar)) {
            sidebar = [sidebar];
        }
        sidebars[path] = handleSideBar(sidebar, path.replace('docs/', ''));
    } catch (err) {
        sidebars[path] = [{
            type: "autogenerated",
            dirName: path, //二级目录
        }]
    }
    try {
        const subConfig = require(join(__dirname, path, '.lsopen', 'config.json'));
        if (subConfig.subNavbar) {
            subConfig.subNavbar.activeBasePath = `${path.replace('docs', '')}/`
            subConfig.subNavbar.to = `${path.replace('docs', '')}/${subConfig.subNavbar.to}`
        }
        if (!isProd || (isProd && !subConfig.hiddenInProd)) {
            subConfigs.push(subConfig);
        }
    } catch (err) {

    }
}

const handleConfig = (config) => {
    for (let key in subConfigs) {
        const subConfig = subConfigs[key];
        if (subConfig.subNavbar) {
            config.themeConfig.subNavbar.forEach((item) => {
                if (subConfig.subNavbar.activeBasePath.startsWith(item.dirName)) {
                    item.items.push(subConfig.subNavbar)
                }
            })
        }
        if (subConfig.navbar) {
            config.themeConfig.navbar.push(subConfig.navbar)
        }
    }

    return config
}

module.exports = {
    sidebars,
    handleConfig
};